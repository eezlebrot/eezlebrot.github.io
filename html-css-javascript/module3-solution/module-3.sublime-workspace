{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"homeHtml",
				"homeHtmlToInsertIntoMainPage"
			],
			[
				"chosen",
				"chosenCategoryShortName"
			],
			[
				"chos",
				"chosenCategoryShortName"
			],
			[
				"random",
				"randomCategoryShortName"
			],
			[
				"home",
				"homeHtml"
			],
			[
				"build",
				"buildAndShowHomeHTML"
			],
			[
				"text",
				"text-center"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"back",
				"background-color"
			],
			[
				"CARD_FAM",
				"CARD_FAM_SOCOCC"
			],
			[
				"UN",
				"UNKNOWN_SUB_CT"
			],
			[
				"Ofp2",
				"OFP2_SUPPORTED\t(CT_SupportingCricuitPack.cpp)"
			],
			[
				"sub",
				"subslot"
			],
			[
				"CT_DA",
				"CT_DAUGHTER_BOARD_3"
			],
			[
				"OF",
				"OFP2\t(CT_CircuitPack.cpp)"
			],
			[
				"UNKNOWN_S",
				"UNKNOWN_SUB_CT"
			],
			[
				"UNKN",
				"UNKNOWN_SHELF"
			],
			[
				"FC_THR",
				"FC_THROW_ERROR_IF"
			],
			[
				"DSC_ShelfConf",
				"DSC_ShelfConfigurations"
			],
			[
				"DSC_Circ",
				"DSC_CircuitPacks"
			],
			[
				"DSC_Conf",
				"DSC_Configuration::XML_FILE"
			],
			[
				"DSC_ShelfC",
				"DSC_ShelfConfigurations"
			],
			[
				"ser",
				"searchKey"
			],
			[
				"NodeVecto",
				"NodeVectorType"
			],
			[
				"Node",
				"NodeMap"
			],
			[
				"NodeIter",
				"NodeIteratorBase"
			],
			[
				"NodeMapType",
				"NodeMapType::iterator"
			],
			[
				"iterator_ad",
				"iterator_adaptor"
			],
			[
				"sea",
				"searchKey"
			],
			[
				"Const",
				"ConstNodeIterator"
			],
			[
				"NodeVc",
				"NodeVector"
			],
			[
				"myNod",
				"myNodePtr"
			],
			[
				"my",
				"myInstance"
			],
			[
				"DSC_Con",
				"DSC_Configuration::Instance"
			],
			[
				"DSC_C",
				"DSC_CircuitPack"
			],
			[
				"DSC_Cir",
				"DSC_CircuitPacks"
			],
			[
				"boost",
				"boost::lexical_cast"
			],
			[
				"aSlo",
				"aSlotNodeVector"
			],
			[
				"const",
				"const_iterator"
			],
			[
				"FC_Cmd",
				"FC_CmdProcessor::E_FAILURE"
			],
			[
				"DSC_Shelf",
				"DSC_ShelfConfigurations"
			],
			[
				"GetShelf",
				"GetShelfConfiguration"
			],
			[
				"DscSh",
				"DscShelfImpMap::const_iterator"
			],
			[
				"Dsc",
				"DscShelfMap"
			],
			[
				"FC_CM",
				"FC_CmdProcessor::E_FAILURE"
			],
			[
				"Dis",
				"DisplayConfiguration"
			],
			[
				"CT_",
				"CT_CardType"
			],
			[
				"myShelf",
				"myShelfConfiguration"
			],
			[
				"mySlot",
				"myShelfSlots"
			],
			[
				"myPar",
				"myShelfParts"
			],
			[
				"DscC",
				"DscCircuitPackMap"
			],
			[
				"myPart",
				"myPartNumbers"
			],
			[
				"FC_T",
				"FC_THROW_ERROR_IF"
			],
			[
				"aNodeMap",
				"aNodeMapPtr"
			],
			[
				"dynam",
				"dynamic_cast"
			],
			[
				"SCSA",
				"SCSAClient"
			],
			[
				"Print",
				"PrintNode"
			],
			[
				"myCard",
				"myCards"
			],
			[
				"NodeMap",
				"NodeMapType::iterator"
			],
			[
				"Er",
				"Error::SCSA_Success"
			],
			[
				"FC_",
				"FC_RuntimeError"
			],
			[
				"aRe",
				"aRedundancySupported"
			],
			[
				"myR",
				"myIsRedundancySupported"
			],
			[
				"aSlot",
				"aSlotWidth"
			],
			[
				"aCardFam",
				"aCardFamily"
			],
			[
				"CardType",
				"CardTypeTranslation"
			],
			[
				"aPar",
				"aPartNumber"
			],
			[
				"Card",
				"CardTypeTranslation"
			],
			[
				"CardTyp",
				"CardTypeMap"
			],
			[
				"DSC_Card",
				"DSC_CardTypeE"
			],
			[
				"CT_Card",
				"CT_CardFamily"
			],
			[
				"aP",
				"aPartMap"
			],
			[
				"myC",
				"myCards"
			],
			[
				"uid",
				"UID_ATTRIBUTE"
			],
			[
				"raw",
				"rawFileList"
			],
			[
				"version",
				"versionTree"
			],
			[
				"Format",
				"FormatForGrok"
			],
			[
				"Convert",
				"ConvertSpaceToPlus"
			],
			[
				"NodeVctor",
				"NodeVectorType::iterator"
			],
			[
				"aShelf",
				"aShelfConfigurations"
			],
			[
				"FC_TH",
				"FC_THROW_ERROR_IF"
			],
			[
				"mySh",
				"myShelfConfigurations"
			],
			[
				"SCS",
				"SCSAClient"
			],
			[
				"Loa",
				"LoadLocalXml"
			],
			[
				"Lo",
				"LoadLocalXml"
			],
			[
				"XML",
				"XML_PATH"
			],
			[
				"CSPII",
				"CSPII_XmlConfig"
			],
			[
				"Part",
				"PartType"
			],
			[
				"UNKONWN",
				"UNKNOWN_SLOT_ID"
			],
			[
				"GetRoo",
				"GetRootNodeMapPtr"
			],
			[
				"EQ_CardShelfStatu",
				"EQ_CardShelfStatusRegion"
			],
			[
				"CSM_",
				"CSM_ExtraInfoRegion"
			],
			[
				"myCsm",
				"myCsmExtraInfoRegion"
			],
			[
				"Get",
				"GetFpgaInfo"
			],
			[
				"aFpg",
				"aFpgaVerRspBlk"
			],
			[
				"GetStatus",
				"GetStatusRegion"
			],
			[
				"TL1_Noti",
				"TL1_NotifDbchg"
			],
			[
				"TL1_Sw",
				"TL1_SWVERRspBlk"
			],
			[
				"k",
				"kCnt"
			],
			[
				"compar",
				"compareList"
			],
			[
				"SetAuto",
				"SetAutoAdjustPower"
			],
			[
				"myMfg",
				"myMfgInfoUpdateCounter"
			],
			[
				"myBoot",
				"myBootTimeoutProcessPtr"
			],
			[
				"Wak",
				"WakeUpTimedProcesses()\tint"
			],
			[
				"copy",
				"copyToClipboard"
			],
			[
				"SCSA_Re",
				"SCSA_ReqPtreeMsg"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 5723,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "$(function () { // Same as document.addEventListener(\"DOMContentLoaded\"...\n\n  // Same as document.querySelector(\"#navbarToggle\").addEventListener(\"blur\",...\n  $(\"#navbarToggle\").blur(function (event) {\n    var screenWidth = window.innerWidth;\n    if (screenWidth < 768) {\n      $(\"#collapsable-nav\").collapse('hide');\n    }\n  });\n});\n\n(function (global) {\n\nvar dc = {};\n\nvar homeHtmlUrl = \"snippets/home-snippet.html\";\nvar allCategoriesUrl =\n  \"https://davids-restaurant.herokuapp.com/categories.json\";\nvar categoriesTitleHtml = \"snippets/categories-title-snippet.html\";\nvar categoryHtml = \"snippets/category-snippet.html\";\nvar menuItemsUrl =\n  \"https://davids-restaurant.herokuapp.com/menu_items.json?category=\";\nvar menuItemsTitleHtml = \"snippets/menu-items-title.html\";\nvar menuItemHtml = \"snippets/menu-item.html\";\n\n// Convenience function for inserting innerHTML for 'select'\nvar insertHtml = function (selector, html) {\n  var targetElem = document.querySelector(selector);\n  targetElem.innerHTML = html;\n};\n\n// Show loading icon inside element identified by 'selector'.\nvar showLoading = function (selector) {\n  var html = \"<div class='text-center'>\";\n  html += \"<img src='images/ajax-loader.gif'></div>\";\n  insertHtml(selector, html);\n};\n\n// Return substitute of '{{propName}}'\n// with propValue in given 'string'\nvar insertProperty = function (string, propName, propValue) {\n  var propToReplace = \"{{\" + propName + \"}}\";\n  string = string\n    .replace(new RegExp(propToReplace, \"g\"), propValue);\n  return string;\n};\n\n// Remove the class 'active' from home and switch to Menu button\nvar switchMenuToActive = function () {\n  // Remove 'active' from home button\n  var classes = document.querySelector(\"#navHomeButton\").className;\n  classes = classes.replace(new RegExp(\"active\", \"g\"), \"\");\n  document.querySelector(\"#navHomeButton\").className = classes;\n\n  // Add 'active' to menu button if not already there\n  classes = document.querySelector(\"#navMenuButton\").className;\n  if (classes.indexOf(\"active\") === -1) {\n    classes += \" active\";\n    document.querySelector(\"#navMenuButton\").className = classes;\n  }\n};\n\n// On page load (before images or CSS)\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n\n// TODO: STEP 0: Look over the code from\n// *** start ***\n// to\n// *** finish ***\n// below.\n// We changed this code to retrieve all categories from the server instead of\n// simply requesting home HTML snippet. We now also have another function\n// called buildAndShowHomeHTML that will receive all the categories from the server\n// and process them: choose random category, retrieve home HTML snippet, insert that\n// random category into the home HTML snippet, and then insert that snippet into our\n// main page (index.html).\n//\n// TODO: STEP 1: Substitute [...] below with the *value* of the function buildAndShowHomeHTML,\n// so it can be called when server responds with the categories data.\n\n// *** start ***\n// On first load, show home view\nshowLoading(\"#main-content\");\n$ajaxUtils.sendGetRequest(\n  allCategoriesUrl,\n  buildAndShowHomeHTML, // ***** <---- TODO: STEP 1: Substitute [...] ******\n  true); // Explicitely setting the flag to get JSON from server processed into an object literal\n});\n// *** finish **\n\n\n// Builds HTML for the home page based on categories array\n// returned from the server.\nfunction buildAndShowHomeHTML (categories) {\n\n  // Load home snippet page\n  $ajaxUtils.sendGetRequest(\n    homeHtmlUrl,\n    function (homeHtml) {\n\n      // TODO: STEP 2: Here, call chooseRandomCategory, passing it retrieved 'categories'\n      // Pay attention to what type of data that function returns vs what the chosenCategoryShortName\n      // variable's name implies it expects.\n      var chosenCategoryShortName = chooseRandomCategory(categories).short_name;\n\n\n      // TODO: STEP 3: Substitute {{randomCategoryShortName}} in the home html snippet with the\n      // chosen category from STEP 2. Use existing insertProperty function for that purpose.\n      // Look through this code for an example of how to do use the insertProperty function.\n\n      // WARNING! You are inserting something that will have to result in a valid Javascript\n      // syntax because the substitution of {{randomCategoryShortName}} becomes an argument\n      // being passed into the $dc.loadMenuItems function. Think about what that argument needs\n      // to look like. For example, a valid call would look something like this:\n      // $dc.loadMenuItems('L')\n      // Hint: you need to surround the chosen category short name with something before inserting\n      // it into the home html snippet.\n      //\n      chosenCategoryShortName = \"\\'\" + chosenCategoryShortName + \"\\'\";\n      var homeHtmlToInsertIntoMainPage = insertProperty(homeHtml, \"randomCategoryShortName\", chosenCategoryShortName);\n\n      console.log(homeHtmlToInsertIntoMainPage);\n      // TODO: STEP 4: Insert the the produced HTML in STEP 3 into the main page\n      // Use the existing insertHtml function for that purpose. Look through this code for an example\n      // of how to do that.\n      // ....\n      insertHtml(\"#main-content\", homeHtmlToInsertIntoMainPage);\n\n    },\n    false); // False here because we are getting just regular HTML from the server, so no need to process JSON.\n}\n\n\n// Given array of category objects, returns a random category object.\nfunction chooseRandomCategory (categories) {\n  // Choose a random index into the array (from 0 inclusively until array length (exclusively))\n  var randomArrayIndex = Math.floor(Math.random() * categories.length);\n\n  // return category object with that randomArrayIndex\n  return categories[randomArrayIndex];\n}\n\n\n// Load the menu categories view\ndc.loadMenuCategories = function () {\n  showLoading(\"#main-content\");\n  $ajaxUtils.sendGetRequest(\n    allCategoriesUrl,\n    buildAndShowCategoriesHTML);\n};\n\n\n// Load the menu items view\n// 'categoryShort' is a short_name for a category\ndc.loadMenuItems = function (categoryShort) {\n  showLoading(\"#main-content\");\n  $ajaxUtils.sendGetRequest(\n    menuItemsUrl + categoryShort,\n    buildAndShowMenuItemsHTML);\n};\n\n\n// Builds HTML for the categories page based on the data\n// from the server\nfunction buildAndShowCategoriesHTML (categories) {\n  // Load title snippet of categories page\n  $ajaxUtils.sendGetRequest(\n    categoriesTitleHtml,\n    function (categoriesTitleHtml) {\n      // Retrieve single category snippet\n      $ajaxUtils.sendGetRequest(\n        categoryHtml,\n        function (categoryHtml) {\n          // Switch CSS class active to menu button\n          switchMenuToActive();\n\n          var categoriesViewHtml =\n            buildCategoriesViewHtml(categories,\n                                    categoriesTitleHtml,\n                                    categoryHtml);\n          insertHtml(\"#main-content\", categoriesViewHtml);\n        },\n        false);\n    },\n    false);\n}\n\n\n// Using categories data and snippets html\n// build categories view HTML to be inserted into page\nfunction buildCategoriesViewHtml(categories,\n                                 categoriesTitleHtml,\n                                 categoryHtml) {\n\n  var finalHtml = categoriesTitleHtml;\n  finalHtml += \"<section class='row'>\";\n\n  // Loop over categories\n  for (var i = 0; i < categories.length; i++) {\n    // Insert category values\n    var html = categoryHtml;\n    var name = \"\" + categories[i].name;\n    var short_name = categories[i].short_name;\n    html =\n      insertProperty(html, \"name\", name);\n    html =\n      insertProperty(html,\n                     \"short_name\",\n                     short_name);\n    finalHtml += html;\n  }\n\n  finalHtml += \"</section>\";\n  return finalHtml;\n}\n\n\n\n// Builds HTML for the single category page based on the data\n// from the server\nfunction buildAndShowMenuItemsHTML (categoryMenuItems) {\n  // Load title snippet of menu items page\n  $ajaxUtils.sendGetRequest(\n    menuItemsTitleHtml,\n    function (menuItemsTitleHtml) {\n      // Retrieve single menu item snippet\n      $ajaxUtils.sendGetRequest(\n        menuItemHtml,\n        function (menuItemHtml) {\n          // Switch CSS class active to menu button\n          switchMenuToActive();\n\n          var menuItemsViewHtml =\n            buildMenuItemsViewHtml(categoryMenuItems,\n                                   menuItemsTitleHtml,\n                                   menuItemHtml);\n          insertHtml(\"#main-content\", menuItemsViewHtml);\n        },\n        false);\n    },\n    false);\n}\n\n\n// Using category and menu items data and snippets html\n// build menu items view HTML to be inserted into page\nfunction buildMenuItemsViewHtml(categoryMenuItems,\n                                menuItemsTitleHtml,\n                                menuItemHtml) {\n\n  menuItemsTitleHtml =\n    insertProperty(menuItemsTitleHtml,\n                   \"name\",\n                   categoryMenuItems.category.name);\n  menuItemsTitleHtml =\n    insertProperty(menuItemsTitleHtml,\n                   \"special_instructions\",\n                   categoryMenuItems.category.special_instructions);\n\n  var finalHtml = menuItemsTitleHtml;\n  finalHtml += \"<section class='row'>\";\n\n  // Loop over menu items\n  var menuItems = categoryMenuItems.menu_items;\n  var catShortName = categoryMenuItems.category.short_name;\n  for (var i = 0; i < menuItems.length; i++) {\n    // Insert menu item values\n    var html = menuItemHtml;\n    html =\n      insertProperty(html, \"short_name\", menuItems[i].short_name);\n    html =\n      insertProperty(html,\n                     \"catShortName\",\n                     catShortName);\n    html =\n      insertItemPrice(html,\n                      \"price_small\",\n                      menuItems[i].price_small);\n    html =\n      insertItemPortionName(html,\n                            \"small_portion_name\",\n                            menuItems[i].small_portion_name);\n    html =\n      insertItemPrice(html,\n                      \"price_large\",\n                      menuItems[i].price_large);\n    html =\n      insertItemPortionName(html,\n                            \"large_portion_name\",\n                            menuItems[i].large_portion_name);\n    html =\n      insertProperty(html,\n                     \"name\",\n                     menuItems[i].name);\n    html =\n      insertProperty(html,\n                     \"description\",\n                     menuItems[i].description);\n\n    // Add clearfix after every second menu item\n    if (i % 2 !== 0) {\n      html +=\n        \"<div class='clearfix visible-lg-block visible-md-block'></div>\";\n    }\n\n    finalHtml += html;\n  }\n\n  finalHtml += \"</section>\";\n  return finalHtml;\n}\n\n\n// Appends price with '$' if price exists\nfunction insertItemPrice(html,\n                         pricePropName,\n                         priceValue) {\n  // If not specified, replace with empty string\n  if (!priceValue) {\n    return insertProperty(html, pricePropName, \"\");\n  }\n\n  priceValue = \"$\" + priceValue.toFixed(2);\n  html = insertProperty(html, pricePropName, priceValue);\n  return html;\n}\n\n\n// Appends portion name in parens if it exists\nfunction insertItemPortionName(html,\n                               portionPropName,\n                               portionValue) {\n  // If not specified, return original string\n  if (!portionValue) {\n    return insertProperty(html, portionPropName, \"\");\n  }\n\n  portionValue = \"(\" + portionValue + \")\";\n  html = insertProperty(html, portionPropName, portionValue);\n  return html;\n}\n\n\nglobal.$dc = dc;\n\n})(window);\n",
			"file": "/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module5-solution/js/script.js",
			"file_size": 11406,
			"file_write_time": 131306177200000000,
			"settings":
			{
				"buffer_size": 11455,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Packag",
				"Package Control: List Packages"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Cscope: ",
				"Cscope: Look up symbol"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"gdb",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"gdb sett",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"gdbs ett",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ke",
				"Preferences: Key Bindings - Default"
			],
			[
				"",
				"CTags: Rebuild Tags"
			],
			[
				"reve",
				"File: Revert"
			],
			[
				"cla",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"subl",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"clan",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"po",
				"Package Control: List Packages"
			],
			[
				"packa",
				"Package Control: Discover Packages"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"subli",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"CTAG",
				"CTags: Show Symbols (all)"
			],
			[
				"Ctags",
				"CTags: Show Symbols (all)"
			],
			[
				"bind",
				"Preferences: Key Bindings - Default"
			],
			[
				"pac",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"view.run_command('check_out_test')",
			"view.run_command('timbo')",
			"view.run_command('example2_command')",
			"view.run_command('timbo')",
			"view.run_command('check_out_test_command')",
			"view-run_command('check_out_test_command')",
			"view.run_command('example_command')",
			"view.run_command(\"check_out_test_command\")",
			"run check_out_test_command",
			"view.check_out_test_command",
			"view.run_command('undo_check_out_test')",
			"view.run_command('check_out_test')",
			"view.run_command('undo_check_out_test')",
			"view.run_command('check_out_test')",
			"view.run_command('ssh_checkout')",
			"view.run_command('sshcheckout')",
			"view.run_command('sshCheckout')",
			"view.run_command('sshcheckout')",
			"view.run_command('sshCheckout')",
			"view.run_command('example')",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/tthacher/Development/ClassProjects/html-css-js/fullstack-course4/assignments/assignment3/images",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module5-solution",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module5-solution/js",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module5-solution/snippets"
	],
	"file_history":
	[
		"/Users/tthacher/Downloads/angular.min.js",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module3-solution/css/styles.css",
		"/Users/tthacher/Development/Avl/SimpliCity_files/app.min-1fa78d2b.js",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module3-solution/module-3.sublime-project",
		"/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module3-solution/index.html",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/tthacher/work/vobs/ots/development/CommonPlatforms/SoftwareServices/T6100/src/T6100_MteraShelfIf.cpp",
		"/Users/tthacher/work/vobs/ots/cscope.files",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/CscopeSublime.sublime-settings",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/Cscope/CscopeSublime.sublime-settings",
		"/Users/tthacher/work/Schema/Config.xsd",
		"/Users/tthacher/work/mt_svn_mac2.sublime-project",
		"/Users/tthacher/work/vobs/ots/development/Agent/AgentServices/AS_ContextPtrBbObject.h",
		"/Users/tthacher/work/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_SmartOpticalCardIf.cpp",
		"/Users/tthacher/work/vobs/ots/development/CommonTypes/src/CT_PartNumber.cpp",
		"/Users/tthacher/work/vobs/ots/OngCardServices/CsPii/src/CSPII_General.cpp",
		"/Users/tthacher/work/vobs/ots/OngCardServices/CsPii/CSPII_General.h",
		"/Users/tthacher/work/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_SmartCardIf.cpp",
		"/Users/tthacher/work/vobs/ots/development/CommonTypes/CT_PartNumber.h",
		"/Users/tthacher/work/vobs/ots/OngCardServices/DSC/src/DSC_Card.cpp",
		"/Users/tthacher/work/vobs/ots/development/CommonTypes/src/CT_SystemIds.cpp",
		"/Users/tthacher/work/vobs/ots/development/CommonTypes/CT_SystemIds.h",
		"/Users/tthacher/work/vobs/ots/development/incl/CoreTypes/CT_CardTypes.h",
		"/Users/tthacher/work/vobs/ots/development/CommonTypes/src/CT_CardTypes.c",
		"/Users/tthacher/work/vobs/ots/development/Agent/Equipment/EQ_BbCard.h",
		"/Users/tthacher/work/vobs/ots/development/CommonPlatforms/LineCardServices/CardServices/CsPii_Imp/src/CSPII_FwProgImp.cpp",
		"/Users/tthacher/Development/venstar/venstarRequest.js",
		"/Users/tthacher/Development/venstar/networkip.js",
		"/Users/tthacher/Development/venstar/venstar.js",
		"/Users/tthacher/Downloads/custom/index_body.html",
		"/Users/tthacher/Downloads/custom/search.jsp",
		"/Users/tthacher/Downloads/custom/mast.jsp",
		"/Users/tthacher/Downloads/custom/readme.txt",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_CardInventory.cpp",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/Example.py",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/ClearcaseSshfs.py",
		"/Users/tthacher/vobs/ots/development/fp10_0.sublime-project",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/SamplePlugin.py",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_PxccIf.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_ShelfIf.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/CT_SystemIds.h",
		"/Users/tthacher/Library/Application Support/Sublime Text 3/Packages/User/SshClearcase.py",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_SystemIds.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/src/T7100_TL1CardTypeRegistry.cpp",
		"/Users/tthacher/vobs/ots/development/incl/CoreTypes/CT_CardTypes.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/CardServices/CSM/src/CSM_SfpSubApplicationOnSmartCard.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/T7100_TL1DoccEntity.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/src/T7100_TL1DoccEntity.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/T7100_TL1CardEntity.h",
		"/Users/tthacher/vobs/ots/development/CommonTypes/CT_SupportingCircuitPack.h",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_SupportingCricuitPack.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/CT_FacilityIds.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_SmartCardIf.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/LW/src/LW_SlotConvert.cpp",
		"/Users/tthacher/vobs/ots/development/Agent/Equipment/src/EQ_BbCardConfig.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/LumosTypes/LT_Slot.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/Agent/AG7100/AG7100_SmartCardIf.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/T7100_TL1Ofp2Entity.h",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Equipment/src/T7100_TL1Ofp2Entity.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1Core/src/T7100_TL1EquipmentCreator.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/TL1Services/TL1DbChgs/src/T7100_TL1DbChangeDispatcher.cpp",
		"/Users/tthacher/vobs/ots/development/Agent/HwCapabilityMatrix/HW_CapabilityMatrix.h",
		"/Users/tthacher/vobs/ots/development/Agent/HwCapabilityMatrix/src/HW_CapabilityMatrix.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_EquipmentConfig.cpp",
		"/Users/tthacher/vobs/ots/development/CommonPlatforms/ControllerServices/ControllerApp/src/Controller_AppIf.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_CircuitPack.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/CT_CircuitPack.h",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_PartNumber.cpp",
		"/Users/tthacher/vobs/ots/development/CommonTypes/src/CT_CardTypes.c",
		"/Users/tthacher/lumos/development/CommonPlatforms/ControllerServices/TL1Services/LumosTypes/LT_Slot.h",
		"/Users/tthacher/lumos/development/CommonPlatforms/ControllerServices/TL1Services/LumosTypes/LT_Equipment.h",
		"/R/OngCardServices/CsPii/src/CSPII_General.cpp",
		"/R/development/CommonTypes/CT_EquipmentConfig.h",
		"/R/development/fp10_0.sublime-project",
		"/Q/OngCardServices/CsPii/src/CSPII_General.cpp",
		"/Q/OngCardServices/DSC/src/DSC_Card.cpp",
		"/Q/OngCardServices/DSC/DSC_Card.h",
		"/Q/OngCardServices/DSC/src/DSC_CircuitPack.cpp",
		"/Q/OngCardServices/DSC/DSC_ShelfConfiguration.h",
		"/Q/OngCardServices/DSC/DSC_ShelfImp.h",
		"/Q/OngCardServices/DSC/src/DSC_Configuration.cpp",
		"/Q/OngCardServices/DSC/DSC_Configuration.h",
		"/Q/OngCardServices/DSC/src/DSC_Menu.cpp",
		"/Q/OngCardServices/DSC/DSC_CircuitPack.h",
		"/I/development/PSMCC/Apps/FC/CardServices/CsPii_Imp/src/CSPII_PSMXfer.cpp",
		"/Q/OngCardServices/DSC/src/DSC_ShelfImp.cpp",
		"/Q/OngCardServices/DSC/src/DSC_ShelfConfiguration.cpp",
		"/Q/OngCardServices/DSC/DSC_Shelf.h",
		"/Q/OngCardServices/DSC/src/DSC_Shelf.cpp",
		"/Q/OngCardServices/DSC/DSC_Slot.h",
		"/Q/OngCardServices/DSC/DSC_Menu.h",
		"/Q/development/CardServices/DSC/src/DSC_Menu.cpp",
		"/Q/OngCardServices/DSC/src/DSC_Slot.cpp",
		"/Q/development/CardServices/DSC/DSC_ShelfConfiguration.h",
		"/Q/development/STPM/Apps/FC/CardServices/SCSA/src/SCSA_Part.cpp",
		"/Q/development/STPM/Apps/FC/CardServices/SCSA/SCSA_Part.h",
		"/Q/development/CardServices/DSC/src/DSC_Card.cpp",
		"/Q/development/CardServices/DSC/src/DSC_CircuitPack.cpp",
		"/Q/development/CardServices/DSC/DSC_ShelfImp.h",
		"/Q/development/PacketServices/PKTLC/dune/cli/PUB/include/d_string_macros.h",
		"/Q/development/SoftwareServices/devices/logicalModel/hdr/Devices_Common.h",
		"/Q/development/CardServices/DSC/DSC_CircuitPack.h",
		"/Q/OngCardServices/Diag/DIAG_Soaker.h",
		"/Q/development/CardServices/DSC/src/DSC_ShelfConfiguration.cpp",
		"/Q/development/incl/STL/defalloc.h",
		"/Q/OngCardServices/Diag/DIAG_Controller.h",
		"/C/7100/.gdbinit",
		"/C/Users/tthacher/AppData/Roaming/Sublime Text 3/Packages/User/SublimeGDB.sublime-settings",
		"/Q/development/CardServices/DSC/src/DSC_Configuration.cpp",
		"/Q/development/CardServices/DSC/DSC_Configuration.h",
		"/Q/development/mt2_0.sublime-project",
		"/Q/development/CardServices/DSC/src/DSC_ShelfImp.cpp",
		"/Q/development/CardServices/DSC/src/DSC_Shelf.cpp",
		"/Q/development/CardServices/DSC/src/DSC_DiagConfigSubApplication.cpp",
		"/Q/development/CardServices/DSC/DSC_Slot.h",
		"/Q/development/CardServices/DSC/DSC_Part.h",
		"/Q/development/CardServices/DSC/DSC_Card.h",
		"/Q/development/CoreServices/SCSA/common/SCSANode.h",
		"/Q/development/CoreServices/SCSA/common/src/SCSANode.cpp",
		"/Q/development/CardServices/DSC/src/DSC_NeConfigSubApplication.cpp",
		"/Q/development/CardServices/DSC/DSC_NeConfigSubApplication.h",
		"/Q/development/Agent/SMAA/SMAA_Common.h",
		"/Q/development/CommonPlatforms/ControllerServices/Agent/Equipment/src/EQ_Menu.cpp",
		"/Q/development/Agent/Equipment/EQ_Def.h",
		"/Q/development/tools/EON/eonsimlib/eonsimSocketQueue.cpp",
		"/Q/development/PacketServices/psmsg/erpsmsgdefs.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"insertHtml",
			"insertProperty",
			"allCategoriesUrl",
			"categories",
			": error",
			"<div class=\"menu-entry\">",
			"ist-item",
			"list-item",
			"id",
			"/svn/tthacher",
			"CD20",
			"SetSubCardType",
			"OCC",
			"occ",
			"OCC",
			"path%",
			"win_path",
			"hdr_src",
			"win",
			"cleartool",
			"PXCC",
			"SFP",
			"CardTypeToCardF",
			"EVOA",
			"OFPP2",
			"PAOFP",
			"myIsDocc",
			"MAX_NUM_SFP_ON_HDTG2",
			"HDTG2",
			"T7100_TL1Ofp2Entity",
			"Sfp",
			"FP",
			"Pxcc",
			"VerifyRequest",
			"Pxcc",
			"PXCC",
			"Pxcc",
			"UpdateSubS",
			"XFP_AXFP_SUPPORTED_BIT_FIELD",
			"XFP",
			"SFP",
			"DOCC",
			"CARD_FAM_HGTMM",
			"HGTMM_FAM",
			"CreateOpticalShelf",
			"SmartCard",
			"W_OCC",
			"NANO_FP5_PORT_LIST_SUPPORTED",
			"FP4_TRANSPONDER_LIKE_PORT_SHELF_MAP",
			"NANO_FP5_PORT_LIST_SUPPORTED_TRANSPONDER_LIKE",
			"FP4_TRANSPONDER_LIKE_PORT_SHELF_MAP",
			"W_OCC",
			"FP4_TRANSPONDER_LIKE_PORT_SHELF_MAP",
			"#20",
			"#22",
			", 1",
			"NANO_FP5_MAIN_LIST_SLOT6_SUPPORTED_TRANSPONDER_LIKE",
			"NANO_FP5_MAIN_LIST_SUPPORTED_TRANSPONDER_LIKE",
			"NANO_FP5_MAIN_LIST_OCC_SUPPORTED",
			"FP5_PORT_LIST_SUPPORTED_TRANSPONDER_LIKE_BIT_FIELD",
			"TRANSPONDER_LIKE",
			"NANO_FP5_MAIN_LIST_SUPPORTED",
			"NANO_FP5_MAIN_LIST_SUPPORTED_BIT_FIELD",
			"NANO_DC_CH88_N_MAP",
			"22",
			"SFP",
			"PWS_",
			",",
			"OFP2",
			"ReadCardType",
			"SUB_CT",
			"UNKNOWN_SHELF",
			"PICO_",
			"NANO",
			"MS",
			"PWS",
			"DOCC",
			"BALI",
			"DOCC",
			"Q:",
			"Q",
			"Instance().",
			"aShelfCfg->",
			"CARD_DATA_FILE",
			"CIRCUITPACK_DATA_FILE",
			"SHELF_DATA_FILE",
			"aShelfConfigurationNode",
			"SHELFCONFIGURATION_DATA_FILE",
			"DSC_Shelfconfiguration",
			"GetCefVersion",
			"(*aShelfConfigurationNode)",
			"(*aCircuitPackNode)",
			"(*aCardNode)",
			"(*aShelfImp)",
			"NodeVector",
			"vector_iterator",
			"NodeVector",
			"virtual",
			"map_iterator",
			"NodeMap",
			"iterator",
			"Iterator",
			"iterator",
			"Vector",
			"vector",
			"Vector",
			"NodeIteratorBase",
			"NodeVectorIterator",
			"NodeIterator",
			"iterator",
			"IteratorBase",
			"NodeIterator",
			"SELF",
			"theNodeIterator",
			"myIterator",
			"Map",
			"map",
			"Map",
			"NodeMap",
			"size",
			"NodeVectorType::iterator",
			"NodeMapType::iterator",
			"Iterator",
			"Node",
			"node",
			"Node",
			"ConstNodeIterator",
			"NodeIterator"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/Users/tthacher/work",
			"DSC_NeConfigSubApplication",
			"Slot",
			"_Config",
			"DSC_",
			"DSC_Config",
			"DSC_",
			"Configuration",
			"ShelfConfiguration",
			"CircuitPack",
			"Shelves",
			"Shelf",
			"Fpga",
			"SuspendTimedProcesses"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5723,
						"regions":
						{
						},
						"selection":
						[
							[
								1257,
								1257
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/tthacher/Development/ClassProjects/html-css-js/eezlebrot.github.io/module5-solution/js/script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11455,
						"regions":
						{
						},
						"selection":
						[
							[
								5730,
								5730
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 933.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 146.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Remote Build QORIQ50",
	"project": "module-3.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"t6100_mterashelfif",
				"CommonPlatforms/SoftwareServices/T6100/src/T6100_MteraShelfIf.cpp"
			],
			[
				"dsc_shelf",
				"OngCardServices/DSC/DSC_Shelf.h"
			],
			[
				"config.x",
				"OngCoreServices/xml/Configuration/Schema/Config.xsd"
			],
			[
				"",
				"OngCoreServices/xml/Configuration/Schema/Card.xsd"
			],
			[
				"shelv",
				"OngCoreServices/xml/Configuration/Shelves.xml"
			],
			[
				"card.x",
				"OngCoreServices/xml/Configuration/Schema/Card.xsd"
			],
			[
				"cards.",
				"OngCoreServices/xml/Configuration/Cards.xml"
			],
			[
				"ag7100_smartopt",
				"CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_SmartOpticalCardIf.cpp"
			],
			[
				"ag7100_smar",
				"CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_SmartCardIf.cpp"
			],
			[
				"ct_part",
				"CommonTypes/src/CT_PartNumber.cpp"
			],
			[
				"dsc_card",
				"OngCardServices/DSC/src/DSC_Card.cpp"
			],
			[
				"cspii_general",
				"OngCardServices/CsPii/src/CSPII_General.cpp"
			],
			[
				"cspii_gener",
				"OngCardServices/CsPii/CSPII_General.h"
			],
			[
				"ct_system",
				"CommonTypes/CT_SystemIds.h"
			],
			[
				"ct_cardtypes",
				"incl/CoreTypes/CT_CardTypes.h"
			],
			[
				"ct_cardty",
				"CommonTypes/src/CT_CardTypes.c"
			],
			[
				"cspii_fwprogimp.cp",
				"CommonPlatforms/LineCardServices/CardServices/CsPii_Imp/src/CSPII_FwProgImp.cpp"
			],
			[
				"ct_sysem",
				"CommonTypes/src/CT_SystemIds.cpp"
			],
			[
				"eq_bbcard",
				"Agent/Equipment/EQ_BbCard.h"
			],
			[
				"ct_card",
				"CommonTypes/src/CT_CardInventory.cpp"
			],
			[
				"ct_cardinv",
				"CommonTypes/src/CT_CardInventory.cpp"
			],
			[
				"ct_cardin",
				"CommonTypes/CT_CardInventory.h"
			],
			[
				"ag7100_pxcc",
				"CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_PxccIf.cpp"
			],
			[
				"ag7100_shelfif.cpp",
				"CommonPlatforms/ControllerServices/Agent/AG7100/src/AG7100_ShelfIf.cpp"
			],
			[
				"ct_systemid",
				"CommonTypes/CT_SystemIds.h"
			],
			[
				"eq_bbcardconfig",
				"Agent\\Equipment\\src\\EQ_BbCardConfig.cpp"
			],
			[
				"lt_slot",
				"CommonPlatforms\\ControllerServices\\TL1Services\\LumosTypes\\LT_Slot.h"
			],
			[
				"lw_slot",
				"CommonPlatforms\\ControllerServices\\TL1Services\\LW\\src\\LW_SlotConvert.cpp"
			],
			[
				"ct_supp",
				"CommonTypes\\CT_SupportingCircuitPack.h"
			],
			[
				"ct_support",
				"CommonTypes\\src\\CT_SupportingCricuitPack.cpp"
			],
			[
				"ct_cir",
				"CommonTypes\\CT_CircuitPack.h"
			],
			[
				"ct_facility",
				"CommonTypes\\CT_FacilityIds.h"
			],
			[
				"ct_suppo",
				"CommonTypes\\src\\CT_SupportingCricuitPack.cpp"
			],
			[
				"ag7100_smart",
				"CommonPlatforms\\ControllerServices\\Agent\\AG7100\\AG7100_SmartCardIf.h"
			],
			[
				"ag7100_smartcardif.cpp",
				"CommonPlatforms\\ControllerServices\\Agent\\AG7100\\src\\AG7100_SmartCardIf.cpp"
			],
			[
				"t7100_tl1dbchang",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1DbChgs\\src\\T7100_TL1DbChangeDispatcher.cpp"
			],
			[
				"equipmentcre",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Core\\src\\T7100_TL1EquipmentCreator.cpp"
			],
			[
				"t7100_tl1sfpent",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Equipment\\src\\T7100_TL1SfpEntity.cpp"
			],
			[
				"t7100_tl1sfp",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Equipment\\T7100_TL1SfpEntity.h"
			],
			[
				"t7100_tl1card",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Equipment\\T7100_TL1CardEntity.h"
			],
			[
				"t7100_tl1pxcc",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Equipment\\src\\T7100_TL1PxccEntity.cpp"
			],
			[
				"csm_sfpsubapplica",
				"CommonPlatforms\\CardServices\\CSM\\src\\CSM_SfpSubApplicationOnSmartCard.cpp"
			],
			[
				"csm_sfpsubapplicationon",
				"CommonPlatforms\\CardServices\\CSM\\src\\CSM_SfpSubApplicationOnSmartCard.cpp"
			],
			[
				"ct_cardtypes.h",
				"incl\\CoreTypes\\CT_CardTypes.h"
			],
			[
				"ct_cardtypes.cpp",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Equipment\\src\\T7100_TL1CardTypeRegistry.cpp"
			],
			[
				"controllerap",
				"CommonPlatforms\\ControllerServices\\ControllerApp\\src\\Controller_AppIf.cpp"
			],
			[
				"ct_equipem",
				"CommonTypes\\CT_EquipmentConfig.h"
			],
			[
				"ct_equip",
				"CommonTypes\\src\\CT_EquipmentConfig.cpp"
			],
			[
				"ct_circ",
				"CommonTypes\\src\\CT_CircuitPack.cpp"
			],
			[
				"ct_circui",
				"CommonTypes\\CT_CircuitPack.h"
			],
			[
				"cspii_gen",
				"OngCardServices\\CsPii\\src\\CSPII_General.cpp"
			],
			[
				"ct_partnu",
				"CommonTypes\\src\\CT_PartNumber.cpp"
			],
			[
				"cspii_genera",
				"OngCardServices\\CsPii\\CSPII_General.h"
			],
			[
				"dsc_config",
				"OngCardServices\\DSC\\src\\DSC_Configuration.cpp"
			],
			[
				"dsc_configr",
				"OngCardServices\\DSC\\DSC_Configuration.h"
			],
			[
				"dsc_shelfimp.h",
				"OngCardServices\\DSC\\DSC_ShelfImp.h"
			],
			[
				"dsc_she",
				"OngCardServices\\DSC\\DSC_ShelfConfiguration.h"
			],
			[
				"dsc_menu",
				"OngCardServices\\DSC\\src\\DSC_Menu.cpp"
			],
			[
				"dsc_menu.h",
				"OngCardServices\\DSC\\DSC_Menu.h"
			],
			[
				"dsc_card.cpp",
				"OngCardServices\\DSC\\src\\DSC_Card.cpp"
			],
			[
				"dsc_cir",
				"OngCardServices\\DSC\\src\\DSC_CircuitPack.cpp"
			],
			[
				"dsc_circui",
				"OngCardServices\\DSC\\DSC_CircuitPack.h"
			],
			[
				"dsc_shelf.c",
				"OngCardServices\\DSC\\src\\DSC_Shelf.cpp"
			],
			[
				"dsc_shelf.h",
				"OngCardServices\\DSC\\DSC_Shelf.h"
			],
			[
				"dsc_slot.",
				"OngCardServices\\DSC\\src\\DSC_Slot.cpp"
			],
			[
				"dsc_slot",
				"OngCardServices\\DSC\\DSC_Slot.h"
			],
			[
				"dsc_shelfc",
				"OngCardServices\\DSC\\src\\DSC_ShelfConfiguration.cpp"
			],
			[
				"dsc_shelfimp",
				"OngCardServices\\DSC\\src\\DSC_ShelfImp.cpp"
			],
			[
				"dsc_configuration",
				"OngCardServices\\DSC\\DSC_Configuration.h"
			],
			[
				"dsc",
				"OngCardServices\\DSC\\DSC_Configuration.h"
			],
			[
				"dsc_circuitpack",
				"OngCardServices\\DSC\\DSC_CircuitPack.h"
			],
			[
				"dsc_conf",
				"Q:\\development\\CardServices\\DSC\\DSC_Configuration.h"
			],
			[
				"dsc_shelfimp.cpp",
				"CardServices\\DSC\\src\\DSC_ShelfImp.cpp"
			],
			[
				"dsc_shelfconf",
				"CardServices\\DSC\\DSC_ShelfConfiguration.h"
			],
			[
				"dsc_shelfconfig",
				"CardServices\\DSC\\src\\DSC_ShelfConfiguration.cpp"
			],
			[
				"dsc_shelimp.h",
				"CardServices\\DSC\\DSC_ShelfImp.h"
			],
			[
				"eq_menu",
				"CommonPlatforms\\ControllerServices\\Agent\\Equipment\\src\\EQ_Menu.cpp"
			],
			[
				"scsano",
				"CoreServices\\SCSA\\common\\src\\SCSANode.cpp"
			],
			[
				"scsanode",
				"CoreServices\\SCSA\\common\\SCSANode.h"
			],
			[
				"scsa_part.cpp",
				"STPM\\Apps\\FC\\CardServices\\SCSA\\src\\SCSA_Part.cpp"
			],
			[
				"scsa_part",
				"STPM\\Apps\\FC\\CardServices\\SCSA\\SCSA_Part.h"
			],
			[
				"scsa_sub",
				"STPM\\Apps\\FC\\CardServices\\SCSA\\SCSA_SubApplicationOnController.h"
			],
			[
				"scsa_suba",
				"STPM\\Apps\\FC\\CardServices\\SCSA\\src\\SCSA_SubApplicationOnController.cpp"
			],
			[
				"dsc_shelfconfi",
				"CardServices\\DSC\\DSC_ShelfConfiguration.h"
			],
			[
				"dsc_ciruic",
				"CardServices\\DSC\\src\\DSC_CircuitPack.cpp"
			],
			[
				"scsanod",
				"CoreServices\\SCSA\\common\\SCSANode.h"
			],
			[
				"dsc_part.cpp",
				"CardServices\\DSC\\src\\DSC_Part.cpp"
			],
			[
				"dsc_part.h",
				"CardServices\\DSC\\DSC_Part.h"
			],
			[
				"dsc_shelf.cpp",
				"CardServices\\DSC\\src\\DSC_Shelf.cpp"
			],
			[
				"scsanode.cpp",
				"CoreServices\\SCSA\\common\\src\\SCSANode.cpp"
			],
			[
				"dsc_configuration.cpp",
				"CardServices\\DSC\\src\\DSC_Configuration.cpp"
			],
			[
				"lw_odu2respconvert.cpp",
				"CommonPlatforms\\ControllerServices\\TL1Services\\LWResp\\src\\LW_Odu2RespConvert.cpp"
			],
			[
				"lw_odu2respconvert.h",
				"CommonPlatforms\\ControllerServices\\TL1Services\\LWResp\\LW_Odu2RespConvert.h"
			],
			[
				"dsc_configs",
				"CardServices\\DSC\\src\\DSC_NeConfigSubApplication.cpp"
			],
			[
				"cspii_xfermtera.cpp",
				"CardServices\\CsPii\\src\\CSPII_XferMtera.cpp"
			],
			[
				"csm_defec",
				"CardServices\\CSM\\src\\CSM_DefectFilterAction.cpp"
			],
			[
				"dsc_configuration.h",
				"CardServices\\DSC\\DSC_Configuration.h"
			],
			[
				"dsc_",
				"CardServices\\DSC\\src\\DSC_Card.cpp"
			],
			[
				"dsc_circuipack",
				"CardServices\\DSC\\src\\DSC_CircuitPack.cpp"
			],
			[
				"ct_shelfslot",
				"CommonTypes\\CT_ShelfSlotSets.h"
			],
			[
				"ct_shelf",
				"CommonTypes\\src\\CT_ShelfSlotSets.cpp"
			],
			[
				"t6100_dsc",
				"CommonPlatforms\\SoftwareServices\\T6100\\src\\T6100_DscIf.cpp"
			],
			[
				"diag_cardappi",
				"CardServices\\Diag\\src\\DIAG_CardAppIf.cpp"
			],
			[
				"cr_swit",
				"CommonPlatforms\\ControllerServices\\CardServices\\CR\\src\\CR_SwitchOperations.cpp"
			],
			[
				"scsa_subap",
				"STPM\\Apps\\FC\\CardServices\\SCSA\\src\\SCSA_SubApplicationOnController.cpp"
			],
			[
				"stpm_create",
				"STPM\\Apps\\FC\\Application\\src\\STPM_CreateBackEnd.cpp"
			],
			[
				"osm1s_ap",
				"OSM1S\\Apps\\FC\\Application\\src\\OSM1S_Application.cpp"
			],
			[
				"osm2_application",
				"OSM2\\Apps\\FC\\Application\\src\\OSM2_Application.cpp"
			],
			[
				"oadm_applicaiton.cpp",
				"OADM\\Apps\\FC\\Application\\src\\OADM_Application.cpp"
			],
			[
				"mfab_application.cp",
				"MFAB\\Apps\\FC\\Application\\src\\MFAB_Application.cpp"
			],
			[
				"dsc_diag",
				"CardServices\\DSC\\DSC_DiagConfigSubApplication.h"
			],
			[
				"dsc_sub",
				"CardServices\\DSC\\src\\DSC_DiagConfigSubApplication.cpp"
			],
			[
				"eq_menu.cpp",
				"CommonPlatforms\\ControllerServices\\Agent\\Equipment\\src\\EQ_Menu.cpp"
			],
			[
				"dsc_part",
				"CardServices\\DSC\\DSC_Part.h"
			],
			[
				"cardtype",
				"CommonTypes\\src\\CT_CardTypes.c"
			],
			[
				"dsc_card.h",
				"CardServices\\DSC\\DSC_Card.h"
			],
			[
				"dsc_slot.h",
				"CardServices\\DSC\\DSC_Slot.h"
			],
			[
				"dsc_circuipack.cpp",
				"CardServices\\DSC\\src\\DSC_CircuitPack.cpp"
			],
			[
				"t7100_tl1crsenti",
				"CommonPlatforms\\ControllerServices\\TL1Services\\TL1Core\\src\\T7100_TL1CrsEntity.cpp"
			],
			[
				"dsc_part.cp",
				"CardServices\\DSC\\src\\DSC_Part.cpp"
			],
			[
				"dsc_par",
				"CardServices\\DSC\\DSC_Part.h"
			],
			[
				"dsc_shelfconfigur",
				"CardServices\\DSC\\src\\DSC_ShelfConfiguration.cpp"
			],
			[
				"_menu",
				"CommonPlatforms\\ControllerServices\\Agent\\Equipment\\EQ_Menu.h"
			],
			[
				"fpcm_testmenu.h",
				"STPM\\Apps\\FPCA\\CM\\FPCM_TestMenu.h"
			],
			[
				"dsc_pa",
				"CardServices\\DSC\\src\\DSC_Part.cpp"
			],
			[
				"scsan",
				"CoreServices\\SCSA\\common\\SCSANode.h"
			],
			[
				"csm_configstatus",
				"CardServices\\CSM\\src\\CSM_ConfigStatus.cpp"
			],
			[
				"agcw_cplusne",
				"CommonPlatforms\\ControllerServices\\TL1Services\\AGCW\\src\\AGCW_cplusNeStub.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/work_web/dlt.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 104.0,
		"last_filter": "VerifyRequest",
		"selected_items":
		[
			[
				"VerifyRequest",
				"VerifyRequest"
			],
			[
				"CT_TL1_port",
				"__CT_TL1_PORTID_H__"
			],
			[
				"CT_TL1_Port",
				"__CT_TL1_PORTID_H__"
			],
			[
				"GetBeNpConf",
				"GetBeNpConfigRegion"
			],
			[
				"GetCsm",
				"GetCsmApp"
			],
			[
				"IsValid",
				"IsValid"
			],
			[
				"EQ_CardShelfS",
				"EQ_CardShelfStatusAction"
			],
			[
				"EQ_CardShelf",
				"EQ_CardShelfStatusAction"
			],
			[
				"GetParent",
				"GetParentAmoStateRegion"
			]
		],
		"width": 968.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 218.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
